AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This CloudFormation template defines shared network infrastructure resources, such as VPCs, subnets, and ALBs, that are commonly used across multiple components of a single application.
  Each component may be developed and deployed independently using different technologies, but they all rely on this foundational network layer.
  These resources are intentionally designed to be independent from any single component or technology, serving as a common infrastructure for the application's overall architecture.

Parameters:
  NATGatewayStrategy:
    Type: String
    Description: "single = 1 NAT (cost-saving), perAZ = AZ-redundant"
    AllowedValues:
      - single
      - perAZ
    Default: single

Conditions:
  enableMultiAzNatStrategy: !Equals [ !Ref NATGatewayStrategy, perAZ ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W60
            reason: "Currently, the service has minimal usage, and the cost of maintaining VPC Flow Logs outweighs the benefits. We plan to enable Flow Logs in the future as the service scales and security requirements grow."
  PublicSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: "10.10.1.0/24"
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
  PrivateSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: "10.10.2.0/24"
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
  RDSSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: "10.10.5.0/24"
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
  PublicSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: "10.10.3.0/24"
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
  PrivateSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: "10.10.4.0/24"
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
  RDSSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: "10.10.6.0/24"
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIP2:
    Type: AWS::EC2::EIP
    Condition: enableMultiAzNatStrategy
    Properties:
      Domain: vpc
  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet1a
  NATGateway2:
    Type: AWS::EC2::NatGateway
    Condition: enableMultiAzNatStrategy
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref PublicSubnet1c
  PublicSubnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1a
  PublicSubnet1cRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1c
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: InternetGatewayAttachment
  PrivateSubnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1a
  PrivateSubnet1cRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet1c
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  RouteToNATGateway1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1
  RouteToNATGateway2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If [enableMultiAzNatStrategy, !Ref NATGateway2, !Ref NATGateway1]

Outputs:
  VPCId:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCId"
  RDSSubnet1aId:
    Description: Subnet ID for RDS in Availability Zone a
    Value: !Ref RDSSubnet1a
    Export:
      Name: !Sub "${AWS::StackName}-RDSSubnet1aId"
  RDSSubnet1cId:
    Description: Subnet ID for RDS in Availability Zone c
    Value: !Ref RDSSubnet1c
    Export:
      Name: !Sub "${AWS::StackName}-RDSSubnet1cId"
