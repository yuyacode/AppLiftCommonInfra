name: CI/CD

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  cfn-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install cfn-lint
        run: pip install cfn-lint

      - name: Add cfn-lint problem matcher
        run: echo "::add-matcher::.github/cfn-lint.json"

      - name: Run cfn-lint
        run: |
          files="gha-oidc-provisioner-role-setup.yaml iam_role_for_deployment.yaml network-stack.yaml security-group.yaml db.yaml ecs-cluster.yaml ecs_task_execution_role.yaml domain-certificate.yaml alb.yaml"
          for file in $files; do
            cfn-lint "$file" -f parseable
          done

  cfn-nag:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'

      - name: Install cfn-nag
        run: gem install cfn-nag

      - name: Run cfn-nag
        run: |
          files="gha-oidc-provisioner-role-setup.yaml iam_role_for_deployment.yaml network-stack.yaml security-group.yaml db.yaml ecs-cluster.yaml ecs_task_execution_role.yaml domain-certificate.yaml alb.yaml"
          for file in $files; do
            cfn_nag "$file"
          done

  create_iam_role_for_deployment:
    needs: [cfn-lint, cfn-nag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_STACK_DEPLOYMENT_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Create IAM Role For Deployment
        run: |
          aws cloudformation deploy \
            --template-file iam_role_for_deployment.yaml \
            --stack-name IAM-Role-For-Deployment \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              GitHubOIDCProviderArn=${{ secrets.GH_OIDC_PROVIDER_ARN }} \
              GHAOIDCProvisionerROLESetupStackName=GHA-OIDC-Provisioner-ROLE-Setup \
              TargetHostedZoneId=Z03831111H7LDS5Y2U8PQ \
              ExecutionRoleStackName=ECS-Task-Execution-Role \
              CompanyRoleStackName=Company-Role \
              StudentRoleStackName=Student-Role \
              MessageAPIRoleStackName=Message-API-Role \
              MessageSchedulerRoleStackName=Message-Scheduler-Role \
              BucketName=${{ secrets.S3_BUCKET_NAME }}

  deploy-network-stack:
    needs: [create_iam_role_for_deployment]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.NETWORK_RESOURCE_DEPLOYMENT_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Deploy Network Stack
        run: |
          aws cloudformation deploy \
            --template-file network-stack.yaml \
            --stack-name Network-Stack \
            --parameter-overrides \
              NATGatewayStrategy=single

  deploy-security-group:
    needs: [deploy-network-stack]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.SECURITY_GROUP_DEPLOYMENT_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Deploy Security Group
        run: |
          aws cloudformation deploy \
            --template-file security-group.yaml \
            --stack-name Security-Group \
            --parameter-overrides \
              NetworkStackName=Network-Stack \
              CompanyAppPort=8081 \
              StudentAppPort=8082 \
              MessageApiPort=8080 \
              InternalAlbListenerPort=80 \
              DbPort=3306

  deploy-db:
    needs: [deploy-security-group]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DB_DEPLOYMENT_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Deploy DB
        run: |
          aws cloudformation deploy \
            --template-file db.yaml \
            --stack-name DB \
            --parameter-overrides \
              NetworkStackName=Network-Stack \
              SGStackName=Security-Group \
              MasterUsername=master \
              DBInstanceClass=db.t4g.medium \
              EngineVersion=8.0.mysql_aurora.3.08.2 \
              ShouldCreateReadReplica=false

  deploy-ecs-cluster:
    needs: [create_iam_role_for_deployment]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECS_CLUSTER_DEPLOYMENT_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Deploy ECS Cluster
        run: |
          aws cloudformation deploy \
            --template-file ecs-cluster.yaml \
            --stack-name ECS-Cluster

  create_ecs_task_execution_role:
    needs: [cfn-lint, cfn-nag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_STACK_DEPLOYMENT_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Create ECS Task Execution Role
        run: |
          aws cloudformation deploy \
            --template-file ecs_task_execution_role.yaml \
            --stack-name ECS-Task-Execution-Role \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM

  deploy-domain-certificate:
    needs: [create_iam_role_for_deployment]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DOMAIN_CERTIFICATE_DEPLOYMENT_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Deploy Domain Certificate
        run: |
          aws cloudformation deploy \
            --template-file domain-certificate.yaml \
            --stack-name Domain-Certificate \
            --parameter-overrides \
              HostedZoneId=Z03831111H7LDS5Y2U8PQ \
              AppFQDN=app-lift.com. \
              ALBStackName=ALB

  # ───────────────────────────────────────────────────────────────
  # 【事前準備】ELBサービス用Service-Linked-Roleの作成
  # 
  # デプロイ先環境にまだService-Linked-Role「AWSServiceRoleForElasticLoadBalancing」が存在しない場合、以下のコマンドを実行して、手動で作成してください。
  # 
  #   aws iam create-service-linked-role --aws-service-name elasticloadbalancing.amazonaws.com
  # 
  # ※cloudformationテンプレートの可搬性を高めるため、Service-Linked-Roleは手動で作成する運用としています。
  # ───────────────────────────────────────────────────────────────
  deploy-alb:
    needs: [deploy-security-group, deploy-domain-certificate]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ALB_DEPLOYMENT_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Deploy ALB
        run: |
          aws cloudformation deploy \
            --template-file alb.yaml \
            --stack-name ALB \
            --parameter-overrides \
              NetworkStackName=Network-Stack \
              SGStackName=Security-Group \
              DomainCertificateStackName=Domain-Certificate
